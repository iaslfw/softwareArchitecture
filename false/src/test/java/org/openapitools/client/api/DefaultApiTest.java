/*
 * Moderne Software Architekturen - 5x5-Labyrinth-API
 * API für das 5x5-Labyrinth-Spiel mit RESTful Endpunkten von Sebastian Wolf Mart.Nr 6771635
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.model.BoardDto;
import org.openapitools.client.model.CreateGameRequestDto;
import org.openapitools.client.model.CreateLabyrinthRequestDto;
import org.openapitools.client.model.ErrorDto;
import org.openapitools.client.model.GameDto;
import org.openapitools.client.model.HintDto;
import org.openapitools.client.model.MoveRequestDto;
import org.openapitools.client.model.MoveResponseDto;
import org.openapitools.client.model.SolutionDto;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Erstelle ein neues Labyrinth-Spiel
     *
     * Startee ein neues Spiel mit dem Spieler auf Position A1 und dem Ziel auf E5
     */
    @Test
    public void createGameTest()  {
        CreateGameRequestDto createGameRequestDto = null;
        GameDto response = api.createGame(createGameRequestDto);

        // TODO: test validations
    }
    
    /**
     * Erstelle ein neues Labyrinth für das aktuelle Spiel
     *
     * Generiere ein neues Labyrinth mit Wänden zwischen den Feldern
     */
    @Test
    public void createLabyrinthTest()  {
        UUID gameId = null;
        CreateLabyrinthRequestDto createLabyrinthRequestDto = null;
        BoardDto response = api.createLabyrinth(gameId, createLabyrinthRequestDto);

        // TODO: test validations
    }
    
    /**
     * Gibe das aktuelle Labyrinth-Spielfeld zurück
     *
     * Liefere Informationen über das Labyrinth einschließlich aller Wände, der Position des Spielers und des Ziels
     */
    @Test
    public void getGameBoardTest()  {
        UUID gameId = null;
        BoardDto response = api.getGameBoard(gameId);

        // TODO: test validations
    }
    
    /**
     * Gib den aktuellen Spielstatus zurück
     *
     * Liefere Informationen über den aktuellen Zustand des Spiels
     */
    @Test
    public void getGameStatusTest()  {
        UUID gameId = null;
        GameDto response = api.getGameStatus(gameId);

        // TODO: test validations
    }
    
    /**
     * Gib einen Hinweis zur Lösung des Labyrinths
     *
     * Liefere einen Hinweis oder den nächsten Schritt auf dem Lösungsweg
     */
    @Test
    public void getHintTest()  {
        UUID gameId = null;
        HintDto response = api.getHint(gameId);

        // TODO: test validations
    }
    
    /**
     * Gib die komplette Lösung des Labyrinths zurück
     *
     * Liefere den vollständigen Lösungsweg von der aktuellen Position zum Ziel
     */
    @Test
    public void getSolutionTest()  {
        UUID gameId = null;
        SolutionDto response = api.getSolution(gameId);

        // TODO: test validations
    }
    
    /**
     * Führe einen Spielzug aus
     *
     * Bewegt den Spieler in eine der vier möglichen Richtungen unter Berücksichtigung der Labyrinthwände
     */
    @Test
    public void movePlayerTest()  {
        UUID gameId = null;
        MoveRequestDto moveRequestDto = null;
        MoveResponseDto response = api.movePlayer(gameId, moveRequestDto);

        // TODO: test validations
    }
    
    /**
     * Setze das Spiel zurück
     *
     * Setzt den Spieler auf die Startposition A1 zurück, behält aber das Labyrinth bei
     */
    @Test
    public void resetGameTest()  {
        UUID gameId = null;
        GameDto response = api.resetGame(gameId);

        // TODO: test validations
    }
    
}