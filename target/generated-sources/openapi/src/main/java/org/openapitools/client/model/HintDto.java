/*
 * Moderne Software Architekturen - 5x5-Labyrinth-API
 * API für das 5x5-Labyrinth-Spiel mit RESTful Endpunkten von Sebastian Wolf Mart.Nr 6771635
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * HintDto
 */
@JsonPropertyOrder({
  HintDto.JSON_PROPERTY_MESSAGE,
  HintDto.JSON_PROPERTY_SUGGESTED_DIRECTION
})
@JsonTypeName("Hint")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-25T13:54:16.140286+02:00[Europe/Berlin]", comments = "Generator version: 7.10.0")
public class HintDto {
  public static final String JSON_PROPERTY_MESSAGE = "message";
  @jakarta.annotation.Nonnull
  private String message;

  /**
   * Empfohlene Bewegungsrichtung
   */
  public enum SuggestedDirectionEnum {
    LINKS(String.valueOf("links")),
    
    RECHTS(String.valueOf("rechts")),
    
    OBEN(String.valueOf("oben")),
    
    UNTEN(String.valueOf("unten"));

    private String value;

    SuggestedDirectionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SuggestedDirectionEnum fromValue(String value) {
      for (SuggestedDirectionEnum b : SuggestedDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SUGGESTED_DIRECTION = "suggestedDirection";
  @jakarta.annotation.Nullable
  private SuggestedDirectionEnum suggestedDirection;

  public HintDto() {
  }

  public HintDto message(@jakarta.annotation.Nonnull String message) {
    
    this.message = message;
    return this;
  }

  /**
   * Texthinweis für den nächsten Schritt
   * @return message
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessage(@jakarta.annotation.Nonnull String message) {
    this.message = message;
  }

  public HintDto suggestedDirection(@jakarta.annotation.Nullable SuggestedDirectionEnum suggestedDirection) {
    
    this.suggestedDirection = suggestedDirection;
    return this;
  }

  /**
   * Empfohlene Bewegungsrichtung
   * @return suggestedDirection
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUGGESTED_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SuggestedDirectionEnum getSuggestedDirection() {
    return suggestedDirection;
  }


  @JsonProperty(JSON_PROPERTY_SUGGESTED_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuggestedDirection(@jakarta.annotation.Nullable SuggestedDirectionEnum suggestedDirection) {
    this.suggestedDirection = suggestedDirection;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HintDto hint = (HintDto) o;
    return Objects.equals(this.message, hint.message) &&
        Objects.equals(this.suggestedDirection, hint.suggestedDirection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, suggestedDirection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HintDto {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    suggestedDirection: ").append(toIndentedString(suggestedDirection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

