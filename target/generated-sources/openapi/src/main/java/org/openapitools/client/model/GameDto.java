/*
 * Moderne Software Architekturen - 5x5-Labyrinth-API
 * API für das 5x5-Labyrinth-Spiel mit RESTful Endpunkten von Sebastian Wolf Mart.Nr 6771635
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.UUID;
import org.openapitools.client.model.PositionDto;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * GameDto
 */
@JsonPropertyOrder({
  GameDto.JSON_PROPERTY_ID,
  GameDto.JSON_PROPERTY_STATUS,
  GameDto.JSON_PROPERTY_PLAYER_POSITION,
  GameDto.JSON_PROPERTY_MOVES,
  GameDto.JSON_PROPERTY_MESSAGE
})
@JsonTypeName("Game")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-25T13:54:16.140286+02:00[Europe/Berlin]", comments = "Generator version: 7.10.0")
public class GameDto {
  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nonnull
  private UUID id;

  /**
   * Aktueller Status des Spiels
   */
  public enum StatusEnum {
    RUNNING(String.valueOf("running")),
    
    SUCCESS(String.valueOf("success")),
    
    FAILED(String.valueOf("failed"));

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  @jakarta.annotation.Nonnull
  private StatusEnum status;

  public static final String JSON_PROPERTY_PLAYER_POSITION = "playerPosition";
  @jakarta.annotation.Nonnull
  private PositionDto playerPosition;

  public static final String JSON_PROPERTY_MOVES = "moves";
  @jakarta.annotation.Nullable
  private Integer moves;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  @jakarta.annotation.Nullable
  private String message;

  public GameDto() {
  }

  public GameDto id(@jakarta.annotation.Nonnull UUID id) {
    
    this.id = id;
    return this;
  }

  /**
   * Eindeutige ID des Spiels
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@jakarta.annotation.Nonnull UUID id) {
    this.id = id;
  }

  public GameDto status(@jakarta.annotation.Nonnull StatusEnum status) {
    
    this.status = status;
    return this;
  }

  /**
   * Aktueller Status des Spiels
   * @return status
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(@jakarta.annotation.Nonnull StatusEnum status) {
    this.status = status;
  }

  public GameDto playerPosition(@jakarta.annotation.Nonnull PositionDto playerPosition) {
    
    this.playerPosition = playerPosition;
    return this;
  }

  /**
   * Get playerPosition
   * @return playerPosition
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PLAYER_POSITION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PositionDto getPlayerPosition() {
    return playerPosition;
  }


  @JsonProperty(JSON_PROPERTY_PLAYER_POSITION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPlayerPosition(@jakarta.annotation.Nonnull PositionDto playerPosition) {
    this.playerPosition = playerPosition;
  }

  public GameDto moves(@jakarta.annotation.Nullable Integer moves) {
    
    this.moves = moves;
    return this;
  }

  /**
   * Anzahl der bisher durchgeführten Züge
   * @return moves
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MOVES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMoves() {
    return moves;
  }


  @JsonProperty(JSON_PROPERTY_MOVES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMoves(@jakarta.annotation.Nullable Integer moves) {
    this.moves = moves;
  }

  public GameDto message(@jakarta.annotation.Nullable String message) {
    
    this.message = message;
    return this;
  }

  /**
   * Optionale Nachricht zum Spielstatus
   * @return message
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessage(@jakarta.annotation.Nullable String message) {
    this.message = message;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GameDto game = (GameDto) o;
    return Objects.equals(this.id, game.id) &&
        Objects.equals(this.status, game.status) &&
        Objects.equals(this.playerPosition, game.playerPosition) &&
        Objects.equals(this.moves, game.moves) &&
        Objects.equals(this.message, game.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, status, playerPosition, moves, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GameDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    playerPosition: ").append(toIndentedString(playerPosition)).append("\n");
    sb.append("    moves: ").append(toIndentedString(moves)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

