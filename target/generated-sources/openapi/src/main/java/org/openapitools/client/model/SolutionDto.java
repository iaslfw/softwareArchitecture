/*
 * Moderne Software Architekturen - 5x5-Labyrinth-API
 * API für das 5x5-Labyrinth-Spiel mit RESTful Endpunkten von Sebastian Wolf Mart.Nr 6771635
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PositionDto;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SolutionDto
 */
@JsonPropertyOrder({
  SolutionDto.JSON_PROPERTY_PATH,
  SolutionDto.JSON_PROPERTY_DIRECTIONS,
  SolutionDto.JSON_PROPERTY_STEPS_TO_GOAL
})
@JsonTypeName("Solution")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-24T10:47:41.163385+02:00[Europe/Berlin]", comments = "Generator version: 7.10.0")
public class SolutionDto {
  public static final String JSON_PROPERTY_PATH = "path";
  @jakarta.annotation.Nonnull
  private List<PositionDto> path = new ArrayList<>();

  /**
   * Gets or Sets directions
   */
  public enum DirectionsEnum {
    LINKS(String.valueOf("links")),
    
    RECHTS(String.valueOf("rechts")),
    
    OBEN(String.valueOf("oben")),
    
    UNTEN(String.valueOf("unten"));

    private String value;

    DirectionsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DirectionsEnum fromValue(String value) {
      for (DirectionsEnum b : DirectionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DIRECTIONS = "directions";
  @jakarta.annotation.Nonnull
  private List<DirectionsEnum> directions = new ArrayList<>();

  public static final String JSON_PROPERTY_STEPS_TO_GOAL = "stepsToGoal";
  @jakarta.annotation.Nullable
  private Integer stepsToGoal;

  public SolutionDto() {
  }

  public SolutionDto path(@jakarta.annotation.Nonnull List<PositionDto> path) {
    
    this.path = path;
    return this;
  }

  public SolutionDto addPathItem(PositionDto pathItem) {
    if (this.path == null) {
      this.path = new ArrayList<>();
    }
    this.path.add(pathItem);
    return this;
  }

  /**
   * Liste der Positionen auf dem Lösungsweg
   * @return path
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<PositionDto> getPath() {
    return path;
  }


  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPath(@jakarta.annotation.Nonnull List<PositionDto> path) {
    this.path = path;
  }

  public SolutionDto directions(@jakarta.annotation.Nonnull List<DirectionsEnum> directions) {
    
    this.directions = directions;
    return this;
  }

  public SolutionDto addDirectionsItem(DirectionsEnum directionsItem) {
    if (this.directions == null) {
      this.directions = new ArrayList<>();
    }
    this.directions.add(directionsItem);
    return this;
  }

  /**
   * Liste der Bewegungsrichtungen für den Lösungsweg
   * @return directions
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DIRECTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<DirectionsEnum> getDirections() {
    return directions;
  }


  @JsonProperty(JSON_PROPERTY_DIRECTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDirections(@jakarta.annotation.Nonnull List<DirectionsEnum> directions) {
    this.directions = directions;
  }

  public SolutionDto stepsToGoal(@jakarta.annotation.Nullable Integer stepsToGoal) {
    
    this.stepsToGoal = stepsToGoal;
    return this;
  }

  /**
   * Anzahl der Schritte bis zum Ziel
   * @return stepsToGoal
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STEPS_TO_GOAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getStepsToGoal() {
    return stepsToGoal;
  }


  @JsonProperty(JSON_PROPERTY_STEPS_TO_GOAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStepsToGoal(@jakarta.annotation.Nullable Integer stepsToGoal) {
    this.stepsToGoal = stepsToGoal;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SolutionDto solution = (SolutionDto) o;
    return Objects.equals(this.path, solution.path) &&
        Objects.equals(this.directions, solution.directions) &&
        Objects.equals(this.stepsToGoal, solution.stepsToGoal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, directions, stepsToGoal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SolutionDto {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    directions: ").append(toIndentedString(directions)).append("\n");
    sb.append("    stepsToGoal: ").append(toIndentedString(stepsToGoal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

