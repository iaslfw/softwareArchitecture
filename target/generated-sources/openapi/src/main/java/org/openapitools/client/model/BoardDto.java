/*
 * Moderne Software Architekturen - 5x5-Labyrinth-API
 * API für das 5x5-Labyrinth-Spiel mit RESTful Endpunkten von Sebastian Wolf Mart.Nr 6771635
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BoardSizeDto;
import org.openapitools.client.model.PositionDto;
import org.openapitools.client.model.WallDto;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * BoardDto
 */
@JsonPropertyOrder({
  BoardDto.JSON_PROPERTY_SIZE,
  BoardDto.JSON_PROPERTY_PLAYER_POSITION,
  BoardDto.JSON_PROPERTY_GOAL,
  BoardDto.JSON_PROPERTY_WALLS,
  BoardDto.JSON_PROPERTY_VISITED
})
@JsonTypeName("Board")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-25T14:09:25.383233+02:00[Europe/Berlin]", comments = "Generator version: 7.10.0")
public class BoardDto {
  public static final String JSON_PROPERTY_SIZE = "size";
  @jakarta.annotation.Nonnull
  private BoardSizeDto size;

  public static final String JSON_PROPERTY_PLAYER_POSITION = "playerPosition";
  @jakarta.annotation.Nonnull
  private PositionDto playerPosition;

  public static final String JSON_PROPERTY_GOAL = "goal";
  @jakarta.annotation.Nonnull
  private PositionDto goal;

  public static final String JSON_PROPERTY_WALLS = "walls";
  @jakarta.annotation.Nonnull
  private List<WallDto> walls = new ArrayList<>();

  public static final String JSON_PROPERTY_VISITED = "visited";
  @jakarta.annotation.Nullable
  private List<PositionDto> visited = new ArrayList<>();

  public BoardDto() {
  }

  public BoardDto size(@jakarta.annotation.Nonnull BoardSizeDto size) {
    
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BoardSizeDto getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSize(@jakarta.annotation.Nonnull BoardSizeDto size) {
    this.size = size;
  }

  public BoardDto playerPosition(@jakarta.annotation.Nonnull PositionDto playerPosition) {
    
    this.playerPosition = playerPosition;
    return this;
  }

  /**
   * Get playerPosition
   * @return playerPosition
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PLAYER_POSITION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PositionDto getPlayerPosition() {
    return playerPosition;
  }


  @JsonProperty(JSON_PROPERTY_PLAYER_POSITION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPlayerPosition(@jakarta.annotation.Nonnull PositionDto playerPosition) {
    this.playerPosition = playerPosition;
  }

  public BoardDto goal(@jakarta.annotation.Nonnull PositionDto goal) {
    
    this.goal = goal;
    return this;
  }

  /**
   * Zielposition E5
   * @return goal
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_GOAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PositionDto getGoal() {
    return goal;
  }


  @JsonProperty(JSON_PROPERTY_GOAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGoal(@jakarta.annotation.Nonnull PositionDto goal) {
    this.goal = goal;
  }

  public BoardDto walls(@jakarta.annotation.Nonnull List<WallDto> walls) {
    
    this.walls = walls;
    return this;
  }

  public BoardDto addWallsItem(WallDto wallsItem) {
    if (this.walls == null) {
      this.walls = new ArrayList<>();
    }
    this.walls.add(wallsItem);
    return this;
  }

  /**
   * Liste der Wände im Labyrinth
   * @return walls
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WALLS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<WallDto> getWalls() {
    return walls;
  }


  @JsonProperty(JSON_PROPERTY_WALLS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWalls(@jakarta.annotation.Nonnull List<WallDto> walls) {
    this.walls = walls;
  }

  public BoardDto visited(@jakarta.annotation.Nullable List<PositionDto> visited) {
    
    this.visited = visited;
    return this;
  }

  public BoardDto addVisitedItem(PositionDto visitedItem) {
    if (this.visited == null) {
      this.visited = new ArrayList<>();
    }
    this.visited.add(visitedItem);
    return this;
  }

  /**
   * Liste der vom Spieler bereits besuchten Positionen
   * @return visited
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VISITED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PositionDto> getVisited() {
    return visited;
  }


  @JsonProperty(JSON_PROPERTY_VISITED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisited(@jakarta.annotation.Nullable List<PositionDto> visited) {
    this.visited = visited;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoardDto board = (BoardDto) o;
    return Objects.equals(this.size, board.size) &&
        Objects.equals(this.playerPosition, board.playerPosition) &&
        Objects.equals(this.goal, board.goal) &&
        Objects.equals(this.walls, board.walls) &&
        Objects.equals(this.visited, board.visited);
  }

  @Override
  public int hashCode() {
    return Objects.hash(size, playerPosition, goal, walls, visited);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoardDto {\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    playerPosition: ").append(toIndentedString(playerPosition)).append("\n");
    sb.append("    goal: ").append(toIndentedString(goal)).append("\n");
    sb.append("    walls: ").append(toIndentedString(walls)).append("\n");
    sb.append("    visited: ").append(toIndentedString(visited)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

