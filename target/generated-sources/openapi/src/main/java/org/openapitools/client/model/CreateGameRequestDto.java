/*
 * Moderne Software Architekturen - 5x5-Labyrinth-API
 * API für das 5x5-Labyrinth-Spiel mit RESTful Endpunkten von Sebastian Wolf Mart.Nr 6771635
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreateGameRequestDto
 */
@JsonPropertyOrder({
  CreateGameRequestDto.JSON_PROPERTY_LABYRINTH_TYPE,
  CreateGameRequestDto.JSON_PROPERTY_DIFFICULTY
})
@JsonTypeName("createGame_request")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-24T10:54:22.793437+02:00[Europe/Berlin]", comments = "Generator version: 7.10.0")
public class CreateGameRequestDto {
  /**
   * Art des zu erstellenden Labyrinths
   */
  public enum LabyrinthTypeEnum {
    RANDOM(String.valueOf("random")),
    
    PREDEFINED(String.valueOf("predefined"));

    private String value;

    LabyrinthTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LabyrinthTypeEnum fromValue(String value) {
      for (LabyrinthTypeEnum b : LabyrinthTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LABYRINTH_TYPE = "labyrinthType";
  @jakarta.annotation.Nullable
  private LabyrinthTypeEnum labyrinthType = LabyrinthTypeEnum.RANDOM;

  /**
   * Schwierigkeitsgrad (bestimmt Anzahl der Wände)
   */
  public enum DifficultyEnum {
    EASY(String.valueOf("easy")),
    
    MEDIUM(String.valueOf("medium")),
    
    HARD(String.valueOf("hard"));

    private String value;

    DifficultyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DifficultyEnum fromValue(String value) {
      for (DifficultyEnum b : DifficultyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DIFFICULTY = "difficulty";
  @jakarta.annotation.Nullable
  private DifficultyEnum difficulty = DifficultyEnum.MEDIUM;

  public CreateGameRequestDto() {
  }

  public CreateGameRequestDto labyrinthType(@jakarta.annotation.Nullable LabyrinthTypeEnum labyrinthType) {
    
    this.labyrinthType = labyrinthType;
    return this;
  }

  /**
   * Art des zu erstellenden Labyrinths
   * @return labyrinthType
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LABYRINTH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LabyrinthTypeEnum getLabyrinthType() {
    return labyrinthType;
  }


  @JsonProperty(JSON_PROPERTY_LABYRINTH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLabyrinthType(@jakarta.annotation.Nullable LabyrinthTypeEnum labyrinthType) {
    this.labyrinthType = labyrinthType;
  }

  public CreateGameRequestDto difficulty(@jakarta.annotation.Nullable DifficultyEnum difficulty) {
    
    this.difficulty = difficulty;
    return this;
  }

  /**
   * Schwierigkeitsgrad (bestimmt Anzahl der Wände)
   * @return difficulty
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIFFICULTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DifficultyEnum getDifficulty() {
    return difficulty;
  }


  @JsonProperty(JSON_PROPERTY_DIFFICULTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDifficulty(@jakarta.annotation.Nullable DifficultyEnum difficulty) {
    this.difficulty = difficulty;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateGameRequestDto createGameRequest = (CreateGameRequestDto) o;
    return Objects.equals(this.labyrinthType, createGameRequest.labyrinthType) &&
        Objects.equals(this.difficulty, createGameRequest.difficulty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(labyrinthType, difficulty);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateGameRequestDto {\n");
    sb.append("    labyrinthType: ").append(toIndentedString(labyrinthType)).append("\n");
    sb.append("    difficulty: ").append(toIndentedString(difficulty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

