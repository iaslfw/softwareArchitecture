/*
 * Moderne Software Architekturen - 5x5-Labyrinth-API
 * API f√ºr das 5x5-Labyrinth-Spiel mit RESTful Endpunkten von Sebastian Wolf Mart.Nr 6771635
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PositionDto
 */
@JsonPropertyOrder({
  PositionDto.JSON_PROPERTY_COLUMN,
  PositionDto.JSON_PROPERTY_ROW
})
@JsonTypeName("Position")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-24T10:54:22.793437+02:00[Europe/Berlin]", comments = "Generator version: 7.10.0")
public class PositionDto {
  /**
   * Spalte auf dem Spielfeld (A-E)
   */
  public enum ColumnEnum {
    A(String.valueOf("A")),
    
    B(String.valueOf("B")),
    
    C(String.valueOf("C")),
    
    D(String.valueOf("D")),
    
    E(String.valueOf("E"));

    private String value;

    ColumnEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ColumnEnum fromValue(String value) {
      for (ColumnEnum b : ColumnEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_COLUMN = "column";
  @jakarta.annotation.Nonnull
  private ColumnEnum column;

  public static final String JSON_PROPERTY_ROW = "row";
  @jakarta.annotation.Nonnull
  private Integer row;

  public PositionDto() {
  }

  public PositionDto column(@jakarta.annotation.Nonnull ColumnEnum column) {
    
    this.column = column;
    return this;
  }

  /**
   * Spalte auf dem Spielfeld (A-E)
   * @return column
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COLUMN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ColumnEnum getColumn() {
    return column;
  }


  @JsonProperty(JSON_PROPERTY_COLUMN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setColumn(@jakarta.annotation.Nonnull ColumnEnum column) {
    this.column = column;
  }

  public PositionDto row(@jakarta.annotation.Nonnull Integer row) {
    
    this.row = row;
    return this;
  }

  /**
   * Zeile auf dem Spielfeld (1-5)
   * minimum: 1
   * maximum: 5
   * @return row
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ROW)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getRow() {
    return row;
  }


  @JsonProperty(JSON_PROPERTY_ROW)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRow(@jakarta.annotation.Nonnull Integer row) {
    this.row = row;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PositionDto position = (PositionDto) o;
    return Objects.equals(this.column, position.column) &&
        Objects.equals(this.row, position.row);
  }

  @Override
  public int hashCode() {
    return Objects.hash(column, row);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PositionDto {\n");
    sb.append("    column: ").append(toIndentedString(column)).append("\n");
    sb.append("    row: ").append(toIndentedString(row)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

